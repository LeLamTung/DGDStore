import Images from "@entities/Images";
import { AppDataSource } from "@databases/data-source";
import { Request, Response } from "express";
import Products from "@entities/Products";
import { Not } from "typeorm";
import { unlink } from "fs";
import path from "path";
const ImagesRepository = AppDataSource.getRepository(Images);
const ProductsRepository = AppDataSource.getRepository(Products);
class ImagesService {
  static async getAllImages(): Promise<Images[]> {
    const data = await ImagesRepository.find({
      relations: ["Product"],
    });
    return data;
  }
  static async updateImage(req: Request, res: Response): Promise<Response> {
    try {
      const idImage = Number(req.body.idImage);
      const isMainImage =
        req.body.MainImage === "true" || req.body.MainImage === true;

      // üîç L·∫•y th√¥ng tin ·∫£nh hi·ªán t·∫°i
      const image = await ImagesRepository.findOne({
        where: { idImage },
        relations: ["Product"],
      });

      if (!image) {
        return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ·∫£nh" });
      }

      const productId = image.Product?.idProduct;
      if (!productId) {
        return res
          .status(400)
          .json({ message: "·∫¢nh kh√¥ng li√™n k·∫øt v·ªõi s·∫£n ph·∫©m n√†o!" });
      }

      // üì§ N·∫øu c√≥ file upload, c·∫≠p nh·∫≠t ImageLink
      if (Array.isArray(req.files) && req.files.length > 0) {
        const file = req.files[0] as Express.Multer.File;
        image.ImageLink = file.filename;
      }

      // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i ·∫£nh ch√≠nh
      image.MainImage = isMainImage;

      // üíæ L∆∞u ·∫£nh ƒë√£ ch·ªânh s·ª≠a
      await ImagesRepository.save(image);

      // üè∑ N·∫øu ch·ªçn l√†m ·∫£nh ch√≠nh ‚Üí c√°c ·∫£nh kh√°c th√†nh ph·ª• + c·∫≠p nh·∫≠t s·∫£n ph·∫©m
      if (isMainImage) {
        // ƒê√°nh d·∫•u c√°c ·∫£nh kh√°c l√† ph·ª•
        await ImagesRepository.update(
          { Product: { idProduct: productId }, idImage: Not(idImage) },
          { MainImage: false }
        );
        //C·∫≠p nh·∫≠t ·∫£nh ch√≠nh c·ªßa s·∫£n ph·∫©m
        await ProductsRepository.update(productId, {
          ImageName: image.ImageLink,
        });
      }

      return res.status(200).json({
        message: "C·∫≠p nh·∫≠t ·∫£nh th√†nh c√¥ng",
        data: image,
      });
    } catch (error) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t ·∫£nh:", error);
      return res.status(500).json({
        message: "L·ªói khi c·∫≠p nh·∫≠t ·∫£nh",
        error: (error as Error).message || error,
      });
    }
  }

  // X√≥a ·∫£nh

  static async deleteImage(req: Request) {
    const { id } = req.params; // L·∫•y id t·ª´ params
    const imageId = parseInt(id);

    try {
      // T√¨m ·∫£nh theo id
      const image = await ImagesRepository.findOne({
        where: { idImage: imageId },
        relations: ["Product"], // Quan h·ªá v·ªõi Product
      });

      if (!image || !image.Product) {
        return null; // Tr·∫£ v·ªÅ null n·∫øu kh√¥ng t√¨m th·∫•y ·∫£nh ho·∫∑c kh√¥ng c√≥ s·∫£n ph·∫©m
      }

      const product = image.Product;

      // N·∫øu ·∫£nh ch√≠nh b·ªã x√≥a
      if (image.MainImage && product.Images && product.Images.length > 1) {
        // T√¨m ·∫£nh c√≤n l·∫°i v√† ƒë·∫∑t ·∫£nh ƒë·∫ßu ti√™n l√†m ·∫£nh ch√≠nh
        const newMainImage = product.Images.find(
          (img) => img.idImage !== imageId
        );
        if (newMainImage) {
          newMainImage.MainImage = true; // ƒê·∫∑t l·∫°i ·∫£nh ch√≠nh m·ªõi
          await ImagesRepository.save(newMainImage);
        }
      }

      // X√≥a ·∫£nh
      await ImagesRepository.remove(image);
      return image; // Tr·∫£ v·ªÅ ·∫£nh ƒë√£ x√≥a
    } catch (error) {
      console.error("Error deleting image:", error);
      throw new Error("L·ªói khi x√≥a ·∫£nh");
    }
  }
}
export default ImagesService;
