import { Request } from "express";
import { AppDataSource } from "@databases/data-source";
import Cart from "@entities/Cart";
import Products from "@entities/Products";
import Users from "@entities/Users";

// ‚úÖ Repository to√†n c·ª•c, an to√†n v√¨ AppDataSource ƒë√£ initialize tr∆∞·ªõc khi router ch·∫°y
const userRepo = AppDataSource.getRepository(Users);
const productRepo = AppDataSource.getRepository(Products);
const cartRepo = AppDataSource.getRepository(Cart);

class CartService {
  /** üõí Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng */
  static async addToCart(req: Request) {
    const { productId, quantity } = req.body;
    const parsedQuantity = Number(quantity);

    if (!productId || isNaN(parsedQuantity) || parsedQuantity <= 0) {
      throw new Error("Invalid productId or quantity");
    }

    const userId = (req.user as any)?.userId;
    if (!userId) throw new Error("User not authenticated");

    const user = await userRepo.findOne({ where: { idUser: Number(userId) } });
    if (!user) throw new Error("User not found");

    const product = await productRepo.findOne({
      where: { idProduct: productId },
      relations: ["Category"],
    });
    if (!product) throw new Error("Product not found");

    // L·∫•y item trong cart n·∫øu ƒë√£ t·ªìn t·∫°i
    let cartItem = await cartRepo.findOne({
      where: {
        User: { idUser: Number(userId) },
        Products: { idProduct: productId },
      },
      relations: ["Products", "User"],
    });

    if (cartItem) {
      const newQty = (cartItem.quantity || 0) + parsedQuantity;

      if (newQty > (product.Stock || 0)) {
        throw new Error(`Kh√¥ng ƒë·ªß t·ªìn kho. Hi·ªán t·∫°i ch·ªâ c√≤n ${product.Stock}`);
      }

      cartItem.quantity = newQty;
      cartItem.TotalPrice = (product.SalePrice || 0) * newQty;
    } else {
      if (parsedQuantity > (product.Stock || 0)) {
        throw new Error(`Kh√¥ng ƒë·ªß t·ªìn kho. Hi·ªán t·∫°i ch·ªâ c√≤n ${product.Stock}`);
      }

      cartItem = cartRepo.create({
        quantity: parsedQuantity,
        TotalPrice: (product.SalePrice || 0) * parsedQuantity,
        Products: product,
        User: user,
      });
    }

    await cartRepo.save(cartItem);
    return await this.getCart(req);
  }

  /** üìã L·∫•y danh s√°ch gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng */
  static async getCart(req: Request) {
    const userId = (req.user as any)?.userId;
    if (!userId) throw new Error("User not authenticated");

    const cartItems = await cartRepo.find({
      where: { User: { idUser: Number(userId) } },
      relations: ["Products", "Products.Category"],
      order: { idCart: "DESC" },
    });

    return cartItems.map((item) => ({
      idCart: item.idCart,
      productId: item.Products?.idProduct,
      ProductName: item.Products?.ProductName,
      ImageName: item.Products?.ImageName,
      CategoryName: item.Products?.Category?.CategoryName,
      SalePrice: item.Products?.SalePrice,
      quantity: item.quantity,
      TotalPrice: item.TotalPrice,
    }));
  }

  /**  C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng */
 static async updateProductQuantity(req: Request, productId: number, quantity: number) {
  const userId = (req.user as any)?.userId;
  if (!userId) throw new Error("User not authenticated");

  const parsedQuantity = Number(quantity);
  if (isNaN(parsedQuantity) || parsedQuantity <= 0) {
    throw new Error("S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0");
  }

  const item = await cartRepo.findOne({
    where: {
      User: { idUser: Number(userId) },
      Products: { idProduct: productId },
    },
    relations: ["Products"],
  });

  if (!item) throw new Error("S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i trong gi·ªè h√†ng");

  const stock = item.Products?.Stock ?? 0;
  if (parsedQuantity > stock) {
    // üö´ Kh√¥ng ƒë·ªß t·ªìn kho
    const error = new Error(`Kh√¥ng ƒë·ªß t·ªìn kho. Hi·ªán t·∫°i ch·ªâ c√≤n ${stock} s·∫£n ph·∫©m.`);
    (error as any).statusCode = 400; // g√°n m√£ l·ªói 400 cho controller ƒë·ªçc ƒë∆∞·ª£c
    throw error;
  }

  item.quantity = parsedQuantity;
  item.TotalPrice = (item.Products?.SalePrice || 0) * parsedQuantity;

  await cartRepo.save(item);

  // ‚úÖ Tr·∫£ v·ªÅ gi·ªè h√†ng m·ªõi
  return await this.getCart(req);
}

  /**  X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng */
  static async removeProductFromCart(req: Request, productId: number) {
    const userId = (req.user as any)?.userId;
    if (!userId) throw new Error("User not authenticated");

    const item = await cartRepo.findOne({
      where: {
        User: { idUser: Number(userId) },
        Products: { idProduct: productId },
      },
    });

    if (!item) throw new Error("Product not found in cart");

    await cartRepo.remove(item);
    return await this.getCart(req);
  }

  /** üóëÔ∏è X√≥a to√†n b·ªô gi·ªè h√†ng */
  static async clearCart(req: Request) {
    const userId = (req.user as any)?.userId;
    if (!userId) throw new Error("User not authenticated");

    await cartRepo.delete({ User: { idUser: Number(userId) } });
    return [];
  }
}

export default CartService;
