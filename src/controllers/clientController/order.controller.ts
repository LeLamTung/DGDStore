import { Request, Response } from "express";
import OrderService from "@services/clientServices/order.service";
import axios from "axios";
import crypto from "crypto";
import { AppDataSource } from "@databases/data-source";
import Products from "@entities/Products";
import Cart from "@entities/Cart";

const CartRepository = AppDataSource.getRepository(Cart);

class OrderController {
  /** üßæ T·∫°o ƒë∆°n h√†ng COD ho·∫∑c MOMO */
  static async createOrder(req: Request, res: Response) {
    try {
      const { PaymentMethod } = req.body;
      const userId = (req.user as any)?.userId;

      if (!userId) {
        return res.status(401).json({ message: "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p!" });
      }

      if (PaymentMethod === "0") {
        // üëâ Thanh to√°n COD
        const order = await OrderService.createOrder(req);
        return res.status(201).json({
          message: "ƒê·∫∑t h√†ng th√†nh c√¥ng (COD)",
          data: order,
        });
      }

      if (PaymentMethod === "1") {
        // üëâ Thanh to√°n qua MOMO
        const accessKey = process.env.MOMO_ACCESS_KEY || "";
        const secretKey = process.env.MOMO_SECRET_KEY || "";
        const partnerCode = process.env.MOMO_PARTNER_CODE || "MOMO";
        const orderId = partnerCode + new Date().getTime();
        const MomoOrderId = orderId; // S·ª≠ d·ª•ng orderId l√†m MomoOrderId

        const redirectUrl =
          `${process.env.MOMO_RETURN_URL || "http://localhost:3001/payment-success"}?orderId=${orderId}`;
        const ipnUrl =
          process.env.MOMO_NOTIFY_URL || "";
        console.log("ipnUrl", ipnUrl);
        const requestType = "payWithMethod";
        const requestId = orderId;
        const orderInfo = "Thanh to√°n ƒë∆°n h√†ng qua Momo";

        // üõí L·∫•y gi·ªè h√†ng t·ª´ DB
        const cartItems = await CartRepository.find({
          where: { User: { idUser: Number(userId) } },
          relations: ["Products"],
        });

        if (!cartItems.length) {
          return res.status(400).json({ message: "Gi·ªè h√†ng tr·ªëng!" });
        }

        // üîπ T√≠nh t·ªïng ti·ªÅn
        let total = 0;
        const momoCartData = cartItems.map((item) => {
          const price = item.Products?.SalePrice || 0;
          const quantity = item.quantity || 0;
          total += price * quantity;
          return {
            productId: item.Products?.idProduct,
            quantity,
          };
        });
        
        // üîπ Chu·∫©n b·ªã extraData g·ª≠i k√®m cho IPN
        const extraDataObject = {
          MomoOrderId,
          CustomerName: req.body.CustomerName,
          PhoneNumber: req.body.PhoneNumber,
          Address: req.body.Address,
          Notes: req.body.Notes,
          userId,
          cartItems: momoCartData,
        };

        const extraData = Buffer.from(
          JSON.stringify(extraDataObject)
        ).toString("base64");

        const rawSignature = `accessKey=${accessKey}&amount=${total}&extraData=${extraData}&ipnUrl=${ipnUrl}&orderId=${orderId}&orderInfo=${orderInfo}&partnerCode=${partnerCode}&redirectUrl=${redirectUrl}&requestId=${requestId}&requestType=${requestType}`;
        const signature = crypto
          .createHmac("sha256", secretKey)
          .update(rawSignature)
          .digest("hex");
        console.log("signature", signature);
        const requestBody = {
          partnerCode,
          partnerName: "MoMo Payment",
          storeId: "MomoTestStore",
          requestId,
          amount: total,
          orderId,
          orderInfo,
          redirectUrl,
          ipnUrl,
          lang: "vi",
          requestType,
          autoCapture: true,
          extraData,
          orderGroupId: "",
          signature,
        };

        const result = await axios.post(
          "https://test-payment.momo.vn/v2/gateway/api/create",
          requestBody
        );

        return res.status(200).json({
          message: "T·∫°o y√™u c·∫ßu thanh to√°n MOMO th√†nh c√¥ng",
          payUrl: result.data.payUrl,
        });
      }

      //  PaymentMethod kh√¥ng h·ª£p l·ªá
      return res.status(400).json({ message: "Ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng h·ª£p l·ªá" });
    } catch (err: any) {
      console.error(" [OrderController] L·ªói t·∫°o ƒë∆°n h√†ng:", err);
      res.status(500).json({ message: "L·ªói t·∫°o ƒë∆°n h√†ng", error: err?.message });
    }
  }

  /** üí≥ Callback IPN t·ª´ MOMO */
  static async momoIPN(req: Request, res: Response) {
    try {
       // ‚úÖ Ghi log ra file ƒë·ªÉ ki·ªÉm tra n·∫øu b·ªã l·ªói IPN kh√¥ng v√†o
      const { resultCode, extraData, orderId } = req.body;

      if (resultCode === 0 || resultCode === "0") {
        console.log("[IPN] Thanh to√°n th√†nh c√¥ng, ti·∫øn h√†nh t·∫°o ƒë∆°n h√†ng...");

        // Gi·∫£i m√£ extraData (base64)
        const decodedData = JSON.parse(
          Buffer.from(extraData, "base64").toString("utf8")
        );
        await OrderService.createFromMomo(decodedData, orderId);
      } else {
        console.warn("[IPN]  Thanh to√°n th·∫•t b·∫°i, resultCode:", resultCode);
      }

      return res.status(200).json({ message: "IPN received" });
    } catch (err) {
      console.error("[IPN]  L·ªói khi x·ª≠ l√Ω callback:", err);
      return res.status(500).json({ message: "IPN x·ª≠ l√Ω l·ªói" });
    }
  }
  /** üîç Ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng theo MomoOrderId */
  static async getOrderStatus(req: Request, res: Response) {
    try {
      // OrderController.getOrderStatus

      const orderId = req.params.orderId || req.query.orderId;

      if (!orderId || typeof orderId !== "string") {
        return res.status(400).json({
          success: false,
          message: "Thi·∫øu ho·∫∑c sai ƒë·ªãnh d·∫°ng orderId",
        });
      }

      const orderData = await OrderService.getOrderByMomoId(orderId);

      if (!orderData) {
        return res.status(404).json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng t∆∞∆°ng ·ª©ng",
        });
      }

      return res.status(200).json({
        success: true,
        message: "Truy v·∫•n tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh c√¥ng",
        data: orderData,
      });
    } catch (err: any) {
      console.error("‚ùå [OrderController] L·ªói khi ki·ªÉm tra ƒë∆°n h√†ng:", err);
      return res.status(500).json({
        success: false,
        message: "L·ªói h·ªá th·ªëng khi ki·ªÉm tra ƒë∆°n h√†ng",
        error: err.message,
      });
    }
  }
}

export default OrderController;
